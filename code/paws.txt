paws[] pawArr = new paws[50];

void setup () {
  size (850, 850);
  noStroke();
  color col;
  for (int i = 0; i < pawArr.length; i++) {
    col = color(random(180, 255), random(180, 255), random(180, 255));
    pawArr[i] = new paws(col, random(width), random(height));
  }
}

void draw() {
  background(255, 252, 233);
  for (int i = 0; i < pawArr.length; i++) {
    pawArr[i].display();
    pawArr[i].update();
    pawArr[i].wiggle(random(2));
  }
}

class paws {
  color c;
  float xpos;
  float ypos;
  float xspeed;
  float yspeed;
  float r;
  float s;

  paws(color tempC, float tempXpos, float tempYpos) {
    c = tempC;
    xpos = tempXpos;
    ypos = tempYpos;

    s = random(1.5);
    r = random(-50, 50);
    xspeed = random (-2, 1);
    yspeed = random (-2, -1);
  }

  void display() {
    pushMatrix();
    rotate(radians(r));
    noStroke();
    scale(s);
    pawsDraw();
    popMatrix();
  }

  void pawsDraw() {
    fill(c);
    ellipse(xpos, ypos-5, 78, 55);
    ellipse(xpos-15, ypos, 50, 50);
    ellipse(xpos+15, ypos, 50, 50);
    ellipse(xpos-35, ypos-24, 30, 30);
    ellipse(xpos-12, ypos-39, 30, 30);
    ellipse(xpos+15, ypos-39, 30, 30);
    ellipse(xpos+35, ypos-24, 30, 30);
    fill(255);
    ellipse(xpos, ypos-8, 25, 25);
    ellipse(xpos-10, ypos-3, 20, 20);
    ellipse(xpos+10, ypos-3, 20, 20);
    ellipse(xpos-35, ypos-25, 10, 10);
    ellipse(xpos-12, ypos-40, 10, 10);
    ellipse(xpos+15, ypos-40, 10, 10);
    ellipse(xpos+35, ypos-25, 10, 10);
  }

  void update() {
    xpos = xpos + xspeed;
    ypos = ypos + yspeed;
    xpos += random(1, -1);
    ypos += random(-1, 1);
    if (xpos > width) {
      xpos = 0;
    }

    if (xpos < 0) {
      xpos = width;
    }

    if (ypos > height) {
      ypos = 0;
    }

    if (ypos < 0) {
      ypos = height;
    }
  }

  void wiggle(float sa) {
    if (ypos > height || ypos < 0 ) {
      ypos = height/2;
    }
     ypos+=random(-sa,sa);
  }

}
